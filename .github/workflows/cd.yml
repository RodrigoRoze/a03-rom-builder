name: ROM Builder For Samsung Galaxy A03

permissions:
    contents: write

on:
    workflow_dispatch:
        inputs:
            GSI:
                description: "GSI Image Download Link"
                required: true
                default: "https://sourceforge.net/projects/andyyan-gsi/files/lineage-20-td/History/lineage-20.0-20240818-UNOFFICIAL-arm64_bvN.img.xz"
                type: string
            NAME:
                description: "ROM Name"
                required: true
                default: "lineage-20.0-a03.zip"
                type: string
            VENDOR:
                description: "Vendor Image Download Link"
                required: true
                default: "https://github.com/RodrigoRoze/a035m-files/releases/download/files/vendor.img"
                type: string

jobs:
    build:
        runs-on: ubuntu-latest
        timeout-minutes: 120

        steps:
            - name: Install Dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y zip xz-utils unzip p7zip-full wget curl atool

            - name: Clone LP Tools
              run: |
                  git clone https://github.com/Exynos-nigg/lpunpack-lpmake-mirror.git lpbinary
                  chmod +x lpbinary/binary/lpmake

            - name: Download and Extract GSI
              run: |
                  cd lpbinary/binary
                  
                  # Download GSI file
                  echo "Downloading GSI image..."
                  wget -q --show-progress "${{ github.event.inputs.GSI }}" -O gsi_image
                  
                  echo "File information:"
                  file gsi_image
                  ls -la gsi_image
                  
                  # Extract based on file extension and content
                  echo "Extracting GSI..."
                  if [[ "${{ github.event.inputs.GSI }}" == *.xz ]]; then
                      echo "Detected XZ compression from URL"
                      mv gsi_image gsi_image.xz
                      xz -d gsi_image.xz
                  elif [[ "${{ github.event.inputs.GSI }}" == *.7z ]]; then
                      echo "Detected 7Z compression"
                      7z x gsi_image
                  elif [[ "${{ github.event.inputs.GSI }}" == *.zip ]]; then
                      echo "Detected ZIP compression"
                      unzip gsi_image
                  elif [[ "${{ github.event.inputs.GSI }}" == *.gz ]]; then
                      echo "Detected GZIP compression"
                      mv gsi_image gsi_image.gz
                      gunzip gsi_image.gz
                  else
                      # Try to detect by file content
                      FILE_TYPE=$(file -b gsi_image)
                      echo "File type detected: $FILE_TYPE"
                      
                      if [[ "$FILE_TYPE" == *"XZ compressed"* ]]; then
                          echo "Extracting XZ by content detection..."
                          mv gsi_image gsi_image.xz
                          xz -d gsi_image.xz
                      elif [[ "$FILE_TYPE" == *"7-zip"* ]]; then
                          echo "Extracting with 7z..."
                          7z x gsi_image
                      elif [[ "$FILE_TYPE" == *"gzip"* ]]; then
                          echo "Extracting with gunzip..."
                          mv gsi_image gsi_image.gz
                          gunzip gsi_image.gz
                      elif [[ "$FILE_TYPE" == *"Zip"* ]]; then
                          echo "Extracting with unzip..."
                          unzip gsi_image
                      else
                          echo "Trying generic extraction with atool..."
                          atool --extract gsi_image
                      fi
                  fi
                  
                  echo "Contents after extraction:"
                  ls -la
                  
                  # Find the .img file or the extracted file
                  IMG_FILE=$(find . -name "*.img" -type f | head -1)
                  
                  if [ -z "$IMG_FILE" ]; then
                      # Check if gsi_image exists and is the extracted file
                      if [ -f "gsi_image" ]; then
                          echo "Found extracted file: gsi_image (renaming to system.img)"
                          mv gsi_image system.img
                      else
                          echo "Error: No .img file found after extraction!"
                          echo "Files in directory:"
                          find . -type f
                          exit 1
                      fi
                  else
                      echo "Found IMG file: $IMG_FILE"
                      mv "$IMG_FILE" system.img
                  fi
                  
                  echo "System image ready:"
                  ls -la system.img

            - name: Download Required Images
              run: |
                  cd lpbinary/binary
                  echo "Downloading vendor image..."
                  wget -q --show-progress "${{ github.event.inputs.VENDOR }}" -O vendor.img

                  echo "Downloading product image..."
                  wget -q --show-progress "https://github.com/RodrigoRoze/a035m-files/releases/download/files/product.img" -O product.img

                  echo "Downloading system_ext image..."
                  wget -q --show-progress "https://github.com/RodrigoRoze/a035m-files/releases/download/files/system_ext.img" -O system_ext.img

            - name: Verify Images
              run: |
                  cd lpbinary/binary
                  echo "Verifying downloaded images..."
                  for img in system.img vendor.img product.img system_ext.img; do
                    if [ ! -f "$img" ]; then
                      echo "Error: $img not found!"
                      exit 1
                    else
                      echo "$img: $(stat -c%s $img) bytes"
                    fi
                  done

            - name: Create Super Image
              run: |
                  cd lpbinary/binary

                  SYSTEM_SIZE=$(stat -c%s system.img)
                  VENDOR_SIZE=$(stat -c%s vendor.img)
                  PRODUCT_SIZE=$(stat -c%s product.img)
                  SYSTEM_EXT_SIZE=$(stat -c%s system_ext.img)

                  echo "Image sizes:"
                  echo "System: $SYSTEM_SIZE bytes"
                  echo "Vendor: $VENDOR_SIZE bytes"
                  echo "Product: $PRODUCT_SIZE bytes"
                  echo "System_ext: $SYSTEM_EXT_SIZE bytes"

                  ./lpmake --metadata-size 65536 \
                           --super-name super \
                           --metadata-slots 2 \
                           --device super:6763315200 \
                           --group main:6761218048 \
                           --partition system:readonly:${SYSTEM_SIZE}:main \
                           --image system=system.img \
                           --partition vendor:readonly:${VENDOR_SIZE}:main \
                           --image vendor=vendor.img \
                           --partition product:readonly:${PRODUCT_SIZE}:main \
                           --image product=product.img \
                           --partition system_ext:readonly:${SYSTEM_EXT_SIZE}:main \
                           --image system_ext=system_ext.img \
                           --sparse \
                           --output super.img

                  echo "Super image created successfully!"
                  ls -la super.img

            - name: Package ROM
              run: |
                  cd lpbinary/binary
                  echo "Creating tar archive..."
                  tar -cf super.tar super.img

                  echo "Compressing to zip..."
                  zip ${{ github.event.inputs.NAME }} super.tar

                  rm -f super.img super.tar
                  echo "Final ROM package:"
                  ls -la ${{ github.event.inputs.NAME }}

            - name: Generate Release Notes
              id: release_notes
              run: |
                  cat << EOF > release_notes.md
                  **Device Information:**
                  - Device: Samsung Galaxy A03 (SM-A035F)
                  - [GSI](${{ github.event.inputs.GSI }})

                  **Installation Instructions:**
                  1. Download the ROM file
                  2. Extract the zip archive
                  3. Flash using Odin, Heimdall or similar tool
                  4. Reboot and enjoy :)

                  **NOTE:** If you're not receiving SMS after flashing you can use this magisk [module](https://github.com/IverCoder/a03nnxx-ril-rollback) to fix it.

                  **Warning:** Flash at your own risk. Make sure to backup your device before flashing.
                  EOF

            - name: Upload ROM to Release
              uses: softprops/action-gh-release@v2
              with:
                  files: lpbinary/binary/${{ github.event.inputs.NAME }}
                  name: "${{ github.event.inputs.NAME }}"
                  tag_name: "build-${{ github.run_number }}-${{ github.run_id }}"
                  body_path: release_notes.md
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Clean up
              if: always()
              run: |
                  rm -rf lpbinary/
                  df -h
